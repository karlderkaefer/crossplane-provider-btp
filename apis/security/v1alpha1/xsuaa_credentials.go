package v1alpha1

import (
	"context"
	"encoding/json"

	corev1 "k8s.io/api/core/v1"
	client "sigs.k8s.io/controller-runtime/pkg/client"

	"github.com/crossplane/crossplane-runtime/pkg/resource"
	"github.com/pkg/errors"
)

var InvalidXsuaaCredentials = errors.New("invalid xsuaa api credentials")
var InvalidSourceReference = errors.New("invalid source reference")
var FailedToGetSecret = errors.New("failed to get secret")

// XsuaaBinding defines the json structure stored in secret to configure xsuaa api client
type XsuaaBinding struct {
	ClientId     string `json:"clientid"`
	ClientSecret string `json:"clientsecret"`
	TokenURL     string `json:"tokenurl"`
	ApiUrl       string `json:"apiurl"`
}

// ReadXsuaaCredentialsCustom is used to read the credentials from a user created secret having the structure of one key (credentials) and the value being a json object
// The json object is generated via the BTP cockpit manually. We try to parse it into a common structure for the xsuaa client
func ReadXsuaaCredentialsCustom(creds []byte) (*XsuaaBinding, error) {
	var binding = &XsuaaBinding{}
	if err := json.Unmarshal(creds, &binding); err != nil {
		return binding, InvalidXsuaaCredentials
	}
	if binding.ClientId == "" || binding.ClientSecret == "" || binding.TokenURL == "" || binding.ApiUrl == "" {
		return binding, InvalidXsuaaCredentials
	}
	return binding, nil
}

// ReadXsuaaCredentialsUpjet is used to read the credentials from the secret created by the upjetted resource subaccountapicredentials
// The keys are generated by upjet and are not configurable, we try to parse them into a common structure for the xsuaa client
func ReadXsuaaCredentialsUpjet(creds corev1.Secret) (*XsuaaBinding, error) {
	var binding = &XsuaaBinding{}
	if creds.Data == nil {
		return nil, InvalidXsuaaCredentials
	}
	// These keys are generated by upjet look into config.go if you want to change them
	apiUrl, ok := creds.Data["attribute.api_url"]
	if !ok {
		return nil, InvalidXsuaaCredentials
	}
	clientId, ok := creds.Data["attribute.client_id"]
	if !ok {
		return nil, InvalidXsuaaCredentials
	}
	clientSecret, ok := creds.Data["attribute.client_secret"]
	if !ok {
		return nil, InvalidXsuaaCredentials
	}
	tokenUrl, ok := creds.Data["attribute.token_url"]
	if !ok {
		return nil, InvalidXsuaaCredentials
	}

	binding.ApiUrl = string(apiUrl)
	binding.ClientId = string(clientId)
	binding.ClientSecret = string(clientSecret)
	binding.TokenURL = string(tokenUrl)

	return binding, nil
}

// BindingSourceType represents the source type for the binding
type BindingSourceType string

const (
	BindingSourceCustom BindingSourceType = "CUSTOM"
	BindingSourceUpjet  BindingSourceType = "UPJET"
)

// determineBindingSource determines the source of the binding, returns an enum
func determineBindingSource(cr *XSUAACredentialsReference) (BindingSourceType, error) {
	if cr.APICredentials.Source != "" {
		return BindingSourceCustom, nil
	} else if cr.SubaccountApiCredentialRef != nil {
		return BindingSourceUpjet, nil
	}
	return "", InvalidSourceReference
}

// CreateBindingFromSource creates a binding from the source specified in the spec
func CreateBindingFromSource(cr *XSUAACredentialsReference, ctx context.Context, kube client.Client) (*XsuaaBinding, error) {
	sourceType, err := determineBindingSource(cr)
	if err != nil {
		return nil, err
	}

	switch sourceType {
	case BindingSourceCustom:
		secretBytes, err := resource.CommonCredentialExtractor(
			ctx,
			cr.APICredentials.Source,
			kube,
			cr.APICredentials.CommonCredentialSelectors,
		)
		if err != nil {
			return nil, FailedToGetSecret
		}
		if secretBytes == nil {
			return nil, InvalidXsuaaCredentials
		}
		return ReadXsuaaCredentialsCustom(secretBytes)
	case BindingSourceUpjet:
		secret := &corev1.Secret{}
		err = kube.Get(
			ctx,
			client.ObjectKey{
				Name:      cr.SubaccountApiCredentialSecret,
				Namespace: cr.SubaccountApiCredentialSecretNamespace,
			},
			secret,
		)
		if err != nil {
			return nil, FailedToGetSecret
		}
		if secret.Data == nil {
			return nil, InvalidXsuaaCredentials
		}
		return ReadXsuaaCredentialsUpjet(*secret)
	default:
		return nil, InvalidSourceReference
	}
}

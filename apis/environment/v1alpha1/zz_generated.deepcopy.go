//go:build !ignore_autogenerated

/*
Copyright 2022 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	"k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Binding) DeepCopyInto(out *Binding) {
	*out = *in
	in.CreatedAt.DeepCopyInto(&out.CreatedAt)
	in.ExpiresAt.DeepCopyInto(&out.ExpiresAt)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Binding.
func (in *Binding) DeepCopy() *Binding {
	if in == nil {
		return nil
	}
	out := new(Binding)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CfEnvironmentObservation) DeepCopyInto(out *CfEnvironmentObservation) {
	*out = *in
	in.EnvironmentObservation.DeepCopyInto(&out.EnvironmentObservation)
	if in.Managers != nil {
		in, out := &in.Managers, &out.Managers
		*out = make([]User, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CfEnvironmentObservation.
func (in *CfEnvironmentObservation) DeepCopy() *CfEnvironmentObservation {
	if in == nil {
		return nil
	}
	out := new(CfEnvironmentObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CfEnvironmentParameters) DeepCopyInto(out *CfEnvironmentParameters) {
	*out = *in
	if in.Managers != nil {
		in, out := &in.Managers, &out.Managers
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CfEnvironmentParameters.
func (in *CfEnvironmentParameters) DeepCopy() *CfEnvironmentParameters {
	if in == nil {
		return nil
	}
	out := new(CfEnvironmentParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CfEnvironmentSpec) DeepCopyInto(out *CfEnvironmentSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	if in.SubaccountSelector != nil {
		in, out := &in.SubaccountSelector, &out.SubaccountSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SubaccountRef != nil {
		in, out := &in.SubaccountRef, &out.SubaccountRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.CloudManagementSelector != nil {
		in, out := &in.CloudManagementSelector, &out.CloudManagementSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.CloudManagementRef != nil {
		in, out := &in.CloudManagementRef, &out.CloudManagementRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CfEnvironmentSpec.
func (in *CfEnvironmentSpec) DeepCopy() *CfEnvironmentSpec {
	if in == nil {
		return nil
	}
	out := new(CfEnvironmentSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CloudFoundryEnvironment) DeepCopyInto(out *CloudFoundryEnvironment) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CloudFoundryEnvironment.
func (in *CloudFoundryEnvironment) DeepCopy() *CloudFoundryEnvironment {
	if in == nil {
		return nil
	}
	out := new(CloudFoundryEnvironment)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CloudFoundryEnvironment) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CloudFoundryEnvironmentList) DeepCopyInto(out *CloudFoundryEnvironmentList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]CloudFoundryEnvironment, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CloudFoundryEnvironmentList.
func (in *CloudFoundryEnvironmentList) DeepCopy() *CloudFoundryEnvironmentList {
	if in == nil {
		return nil
	}
	out := new(CloudFoundryEnvironmentList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CloudFoundryEnvironmentList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EnvironmentObservation) DeepCopyInto(out *EnvironmentObservation) {
	*out = *in
	if in.BrokerID != nil {
		in, out := &in.BrokerID, &out.BrokerID
		*out = new(string)
		**out = **in
	}
	if in.CommercialType != nil {
		in, out := &in.CommercialType, &out.CommercialType
		*out = new(string)
		**out = **in
	}
	if in.CreatedDate != nil {
		in, out := &in.CreatedDate, &out.CreatedDate
		*out = new(string)
		**out = **in
	}
	if in.CustomLabels != nil {
		in, out := &in.CustomLabels, &out.CustomLabels
		*out = new(map[string][]string)
		if **in != nil {
			in, out := *in, *out
			*out = make(map[string][]string, len(*in))
			for key, val := range *in {
				var outVal []string
				if val == nil {
					(*out)[key] = nil
				} else {
					inVal := (*in)[key]
					in, out := &inVal, &outVal
					*out = make([]string, len(*in))
					copy(*out, *in)
				}
				(*out)[key] = outVal
			}
		}
	}
	if in.DashboardURL != nil {
		in, out := &in.DashboardURL, &out.DashboardURL
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.EnvironmentType != nil {
		in, out := &in.EnvironmentType, &out.EnvironmentType
		*out = new(string)
		**out = **in
	}
	if in.GlobalAccountGUID != nil {
		in, out := &in.GlobalAccountGUID, &out.GlobalAccountGUID
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = new(string)
		**out = **in
	}
	if in.LandscapeLabel != nil {
		in, out := &in.LandscapeLabel, &out.LandscapeLabel
		*out = new(string)
		**out = **in
	}
	if in.ModifiedDate != nil {
		in, out := &in.ModifiedDate, &out.ModifiedDate
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Operation != nil {
		in, out := &in.Operation, &out.Operation
		*out = new(string)
		**out = **in
	}
	if in.Parameters != nil {
		in, out := &in.Parameters, &out.Parameters
		*out = new(string)
		**out = **in
	}
	if in.PlanID != nil {
		in, out := &in.PlanID, &out.PlanID
		*out = new(string)
		**out = **in
	}
	if in.PlanName != nil {
		in, out := &in.PlanName, &out.PlanName
		*out = new(string)
		**out = **in
	}
	if in.PlatformID != nil {
		in, out := &in.PlatformID, &out.PlatformID
		*out = new(string)
		**out = **in
	}
	if in.ServiceID != nil {
		in, out := &in.ServiceID, &out.ServiceID
		*out = new(string)
		**out = **in
	}
	if in.ServiceName != nil {
		in, out := &in.ServiceName, &out.ServiceName
		*out = new(string)
		**out = **in
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	if in.StateMessage != nil {
		in, out := &in.StateMessage, &out.StateMessage
		*out = new(string)
		**out = **in
	}
	if in.SubaccountGUID != nil {
		in, out := &in.SubaccountGUID, &out.SubaccountGUID
		*out = new(string)
		**out = **in
	}
	if in.TenantID != nil {
		in, out := &in.TenantID, &out.TenantID
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EnvironmentObservation.
func (in *EnvironmentObservation) DeepCopy() *EnvironmentObservation {
	if in == nil {
		return nil
	}
	out := new(EnvironmentObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EnvironmentStatus) DeepCopyInto(out *EnvironmentStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EnvironmentStatus.
func (in *EnvironmentStatus) DeepCopy() *EnvironmentStatus {
	if in == nil {
		return nil
	}
	out := new(EnvironmentStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KymaEnvironment) DeepCopyInto(out *KymaEnvironment) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KymaEnvironment.
func (in *KymaEnvironment) DeepCopy() *KymaEnvironment {
	if in == nil {
		return nil
	}
	out := new(KymaEnvironment)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KymaEnvironment) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KymaEnvironmentBinding) DeepCopyInto(out *KymaEnvironmentBinding) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KymaEnvironmentBinding.
func (in *KymaEnvironmentBinding) DeepCopy() *KymaEnvironmentBinding {
	if in == nil {
		return nil
	}
	out := new(KymaEnvironmentBinding)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KymaEnvironmentBinding) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KymaEnvironmentBindingList) DeepCopyInto(out *KymaEnvironmentBindingList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]KymaEnvironmentBinding, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KymaEnvironmentBindingList.
func (in *KymaEnvironmentBindingList) DeepCopy() *KymaEnvironmentBindingList {
	if in == nil {
		return nil
	}
	out := new(KymaEnvironmentBindingList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KymaEnvironmentBindingList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KymaEnvironmentBindingObservation) DeepCopyInto(out *KymaEnvironmentBindingObservation) {
	*out = *in
	if in.Bindings != nil {
		in, out := &in.Bindings, &out.Bindings
		*out = make([]Binding, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KymaEnvironmentBindingObservation.
func (in *KymaEnvironmentBindingObservation) DeepCopy() *KymaEnvironmentBindingObservation {
	if in == nil {
		return nil
	}
	out := new(KymaEnvironmentBindingObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KymaEnvironmentBindingParameters) DeepCopyInto(out *KymaEnvironmentBindingParameters) {
	*out = *in
	out.RotationInterval = in.RotationInterval
	out.BindingTTl = in.BindingTTl
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KymaEnvironmentBindingParameters.
func (in *KymaEnvironmentBindingParameters) DeepCopy() *KymaEnvironmentBindingParameters {
	if in == nil {
		return nil
	}
	out := new(KymaEnvironmentBindingParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KymaEnvironmentBindingSpec) DeepCopyInto(out *KymaEnvironmentBindingSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	out.ForProvider = in.ForProvider
	if in.KymaEnvironmentSelector != nil {
		in, out := &in.KymaEnvironmentSelector, &out.KymaEnvironmentSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.KymaEnvironmentRef != nil {
		in, out := &in.KymaEnvironmentRef, &out.KymaEnvironmentRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.CloudManagementSelector != nil {
		in, out := &in.CloudManagementSelector, &out.CloudManagementSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.CloudManagementRef != nil {
		in, out := &in.CloudManagementRef, &out.CloudManagementRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KymaEnvironmentBindingSpec.
func (in *KymaEnvironmentBindingSpec) DeepCopy() *KymaEnvironmentBindingSpec {
	if in == nil {
		return nil
	}
	out := new(KymaEnvironmentBindingSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KymaEnvironmentBindingStatus) DeepCopyInto(out *KymaEnvironmentBindingStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KymaEnvironmentBindingStatus.
func (in *KymaEnvironmentBindingStatus) DeepCopy() *KymaEnvironmentBindingStatus {
	if in == nil {
		return nil
	}
	out := new(KymaEnvironmentBindingStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KymaEnvironmentList) DeepCopyInto(out *KymaEnvironmentList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]KymaEnvironment, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KymaEnvironmentList.
func (in *KymaEnvironmentList) DeepCopy() *KymaEnvironmentList {
	if in == nil {
		return nil
	}
	out := new(KymaEnvironmentList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KymaEnvironmentList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KymaEnvironmentObservation) DeepCopyInto(out *KymaEnvironmentObservation) {
	*out = *in
	in.EnvironmentObservation.DeepCopyInto(&out.EnvironmentObservation)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KymaEnvironmentObservation.
func (in *KymaEnvironmentObservation) DeepCopy() *KymaEnvironmentObservation {
	if in == nil {
		return nil
	}
	out := new(KymaEnvironmentObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KymaEnvironmentParameters) DeepCopyInto(out *KymaEnvironmentParameters) {
	*out = *in
	in.Parameters.DeepCopyInto(&out.Parameters)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KymaEnvironmentParameters.
func (in *KymaEnvironmentParameters) DeepCopy() *KymaEnvironmentParameters {
	if in == nil {
		return nil
	}
	out := new(KymaEnvironmentParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KymaEnvironmentSpec) DeepCopyInto(out *KymaEnvironmentSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	if in.SubaccountSelector != nil {
		in, out := &in.SubaccountSelector, &out.SubaccountSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SubaccountRef != nil {
		in, out := &in.SubaccountRef, &out.SubaccountRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.CloudManagementSelector != nil {
		in, out := &in.CloudManagementSelector, &out.CloudManagementSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.CloudManagementRef != nil {
		in, out := &in.CloudManagementRef, &out.CloudManagementRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KymaEnvironmentSpec.
func (in *KymaEnvironmentSpec) DeepCopy() *KymaEnvironmentSpec {
	if in == nil {
		return nil
	}
	out := new(KymaEnvironmentSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KymaEnvironmentStatus) DeepCopyInto(out *KymaEnvironmentStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
	if in.RetryStatus != nil {
		in, out := &in.RetryStatus, &out.RetryStatus
		*out = new(RetryStatus)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KymaEnvironmentStatus.
func (in *KymaEnvironmentStatus) DeepCopy() *KymaEnvironmentStatus {
	if in == nil {
		return nil
	}
	out := new(KymaEnvironmentStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RetryStatus) DeepCopyInto(out *RetryStatus) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RetryStatus.
func (in *RetryStatus) DeepCopy() *RetryStatus {
	if in == nil {
		return nil
	}
	out := new(RetryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *User) DeepCopyInto(out *User) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new User.
func (in *User) DeepCopy() *User {
	if in == nil {
		return nil
	}
	out := new(User)
	in.DeepCopyInto(out)
	return out
}

/*
SaaS Provisioning Service

The SAP SaaS Provisioning service provides REST APIs that are responsible for the registration and provisioning of multitenant applications and services.   Use the APIs in this service to perform various operations related to your multitenant applications and services. For example, to get application registration details, subscribe a tenant to your application, unsubscribe a tenant from your application, retrieve all your application subscriptions, update subscription dependencies, and to get subscription job information. Note: \"Application Operations for App Providers\" APIs are intended for maintenance activities, not for runtime flows.  See also: * [Authorization](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/3670474a58c24ac2b082e76cbbd9dc19.html) * [Rate Limiting](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/77b217b3f57a45b987eb7fbc3305ce1e.html) * [Error Response Format](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/77fef2fb104b4b1795e2e6cee790e8b8.html) * [Asynchronous Jobs](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/0a0a6ab0ad114d72a6611c1c6b21683e.html)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DependenciesResponseObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DependenciesResponseObject{}

// DependenciesResponseObject Any reuse services used or required by a subscribed application and its services.
type DependenciesResponseObject struct {
	// The appId of the master XSUAA instance provided when registering the reusable service in saas registry.
	AppId *string `json:"appId,omitempty"`
	// The unique registration name of the linked dependency application.
	AppName *string `json:"appName,omitempty"`
	// The list of relevant dependencies and their descriptions.
	Dependencies []DependenciesResponseObject `json:"dependencies,omitempty"`
	// In case there are errors during dependencies' assignments, the descriptions are shown here.
	Error *string `json:"error,omitempty"`
	// The ID of the provider subaccount.
	ProviderSubaccountID *string `json:"providerSubaccountID,omitempty"`
	// The xsappname configured in the security descriptor file used to create the XSUAA instance.
	Xsappname *string `json:"xsappname,omitempty"`
}

// NewDependenciesResponseObject instantiates a new DependenciesResponseObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDependenciesResponseObject() *DependenciesResponseObject {
	this := DependenciesResponseObject{}
	return &this
}

// NewDependenciesResponseObjectWithDefaults instantiates a new DependenciesResponseObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDependenciesResponseObjectWithDefaults() *DependenciesResponseObject {
	this := DependenciesResponseObject{}
	return &this
}

// GetAppId returns the AppId field value if set, zero value otherwise.
func (o *DependenciesResponseObject) GetAppId() string {
	if o == nil || IsNil(o.AppId) {
		var ret string
		return ret
	}
	return *o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DependenciesResponseObject) GetAppIdOk() (*string, bool) {
	if o == nil || IsNil(o.AppId) {
		return nil, false
	}
	return o.AppId, true
}

// HasAppId returns a boolean if a field has been set.
func (o *DependenciesResponseObject) HasAppId() bool {
	if o != nil && !IsNil(o.AppId) {
		return true
	}

	return false
}

// SetAppId gets a reference to the given string and assigns it to the AppId field.
func (o *DependenciesResponseObject) SetAppId(v string) {
	o.AppId = &v
}

// GetAppName returns the AppName field value if set, zero value otherwise.
func (o *DependenciesResponseObject) GetAppName() string {
	if o == nil || IsNil(o.AppName) {
		var ret string
		return ret
	}
	return *o.AppName
}

// GetAppNameOk returns a tuple with the AppName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DependenciesResponseObject) GetAppNameOk() (*string, bool) {
	if o == nil || IsNil(o.AppName) {
		return nil, false
	}
	return o.AppName, true
}

// HasAppName returns a boolean if a field has been set.
func (o *DependenciesResponseObject) HasAppName() bool {
	if o != nil && !IsNil(o.AppName) {
		return true
	}

	return false
}

// SetAppName gets a reference to the given string and assigns it to the AppName field.
func (o *DependenciesResponseObject) SetAppName(v string) {
	o.AppName = &v
}

// GetDependencies returns the Dependencies field value if set, zero value otherwise.
func (o *DependenciesResponseObject) GetDependencies() []DependenciesResponseObject {
	if o == nil || IsNil(o.Dependencies) {
		var ret []DependenciesResponseObject
		return ret
	}
	return o.Dependencies
}

// GetDependenciesOk returns a tuple with the Dependencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DependenciesResponseObject) GetDependenciesOk() ([]DependenciesResponseObject, bool) {
	if o == nil || IsNil(o.Dependencies) {
		return nil, false
	}
	return o.Dependencies, true
}

// HasDependencies returns a boolean if a field has been set.
func (o *DependenciesResponseObject) HasDependencies() bool {
	if o != nil && !IsNil(o.Dependencies) {
		return true
	}

	return false
}

// SetDependencies gets a reference to the given []DependenciesResponseObject and assigns it to the Dependencies field.
func (o *DependenciesResponseObject) SetDependencies(v []DependenciesResponseObject) {
	o.Dependencies = v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *DependenciesResponseObject) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DependenciesResponseObject) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *DependenciesResponseObject) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *DependenciesResponseObject) SetError(v string) {
	o.Error = &v
}

// GetProviderSubaccountID returns the ProviderSubaccountID field value if set, zero value otherwise.
func (o *DependenciesResponseObject) GetProviderSubaccountID() string {
	if o == nil || IsNil(o.ProviderSubaccountID) {
		var ret string
		return ret
	}
	return *o.ProviderSubaccountID
}

// GetProviderSubaccountIDOk returns a tuple with the ProviderSubaccountID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DependenciesResponseObject) GetProviderSubaccountIDOk() (*string, bool) {
	if o == nil || IsNil(o.ProviderSubaccountID) {
		return nil, false
	}
	return o.ProviderSubaccountID, true
}

// HasProviderSubaccountID returns a boolean if a field has been set.
func (o *DependenciesResponseObject) HasProviderSubaccountID() bool {
	if o != nil && !IsNil(o.ProviderSubaccountID) {
		return true
	}

	return false
}

// SetProviderSubaccountID gets a reference to the given string and assigns it to the ProviderSubaccountID field.
func (o *DependenciesResponseObject) SetProviderSubaccountID(v string) {
	o.ProviderSubaccountID = &v
}

// GetXsappname returns the Xsappname field value if set, zero value otherwise.
func (o *DependenciesResponseObject) GetXsappname() string {
	if o == nil || IsNil(o.Xsappname) {
		var ret string
		return ret
	}
	return *o.Xsappname
}

// GetXsappnameOk returns a tuple with the Xsappname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DependenciesResponseObject) GetXsappnameOk() (*string, bool) {
	if o == nil || IsNil(o.Xsappname) {
		return nil, false
	}
	return o.Xsappname, true
}

// HasXsappname returns a boolean if a field has been set.
func (o *DependenciesResponseObject) HasXsappname() bool {
	if o != nil && !IsNil(o.Xsappname) {
		return true
	}

	return false
}

// SetXsappname gets a reference to the given string and assigns it to the Xsappname field.
func (o *DependenciesResponseObject) SetXsappname(v string) {
	o.Xsappname = &v
}

func (o DependenciesResponseObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DependenciesResponseObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AppId) {
		toSerialize["appId"] = o.AppId
	}
	if !IsNil(o.AppName) {
		toSerialize["appName"] = o.AppName
	}
	if !IsNil(o.Dependencies) {
		toSerialize["dependencies"] = o.Dependencies
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.ProviderSubaccountID) {
		toSerialize["providerSubaccountID"] = o.ProviderSubaccountID
	}
	if !IsNil(o.Xsappname) {
		toSerialize["xsappname"] = o.Xsappname
	}
	return toSerialize, nil
}

type NullableDependenciesResponseObject struct {
	value *DependenciesResponseObject
	isSet bool
}

func (v NullableDependenciesResponseObject) Get() *DependenciesResponseObject {
	return v.value
}

func (v *NullableDependenciesResponseObject) Set(val *DependenciesResponseObject) {
	v.value = val
	v.isSet = true
}

func (v NullableDependenciesResponseObject) IsSet() bool {
	return v.isSet
}

func (v *NullableDependenciesResponseObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDependenciesResponseObject(val *DependenciesResponseObject) *NullableDependenciesResponseObject {
	return &NullableDependenciesResponseObject{value: val, isSet: true}
}

func (v NullableDependenciesResponseObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDependenciesResponseObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



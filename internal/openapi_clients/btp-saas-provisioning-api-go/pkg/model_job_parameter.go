/*
SaaS Provisioning Service

The SAP SaaS Provisioning service provides REST APIs that are responsible for the registration and provisioning of multitenant applications and services.   Use the APIs in this service to perform various operations related to your multitenant applications and services. For example, to get application registration details, subscribe a tenant to your application, unsubscribe a tenant from your application, retrieve all your application subscriptions, update subscription dependencies, and to get subscription job information. Note: \"Application Operations for App Providers\" APIs are intended for maintenance activities, not for runtime flows.  See also: * [Authorization](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/3670474a58c24ac2b082e76cbbd9dc19.html) * [Rate Limiting](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/77b217b3f57a45b987eb7fbc3305ce1e.html) * [Error Response Format](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/77fef2fb104b4b1795e2e6cee790e8b8.html) * [Asynchronous Jobs](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/0a0a6ab0ad114d72a6611c1c6b21683e.html)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the JobParameter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobParameter{}

// JobParameter struct for JobParameter
type JobParameter struct {
	Identifying *bool `json:"identifying,omitempty"`
	Type *string `json:"type,omitempty"`
	Value map[string]interface{} `json:"value,omitempty"`
}

// NewJobParameter instantiates a new JobParameter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobParameter() *JobParameter {
	this := JobParameter{}
	return &this
}

// NewJobParameterWithDefaults instantiates a new JobParameter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobParameterWithDefaults() *JobParameter {
	this := JobParameter{}
	return &this
}

// GetIdentifying returns the Identifying field value if set, zero value otherwise.
func (o *JobParameter) GetIdentifying() bool {
	if o == nil || IsNil(o.Identifying) {
		var ret bool
		return ret
	}
	return *o.Identifying
}

// GetIdentifyingOk returns a tuple with the Identifying field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobParameter) GetIdentifyingOk() (*bool, bool) {
	if o == nil || IsNil(o.Identifying) {
		return nil, false
	}
	return o.Identifying, true
}

// HasIdentifying returns a boolean if a field has been set.
func (o *JobParameter) HasIdentifying() bool {
	if o != nil && !IsNil(o.Identifying) {
		return true
	}

	return false
}

// SetIdentifying gets a reference to the given bool and assigns it to the Identifying field.
func (o *JobParameter) SetIdentifying(v bool) {
	o.Identifying = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *JobParameter) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobParameter) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *JobParameter) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *JobParameter) SetType(v string) {
	o.Type = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *JobParameter) GetValue() map[string]interface{} {
	if o == nil || IsNil(o.Value) {
		var ret map[string]interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobParameter) GetValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return map[string]interface{}{}, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *JobParameter) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *JobParameter) SetValue(v map[string]interface{}) {
	o.Value = v
}

func (o JobParameter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobParameter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Identifying) {
		toSerialize["identifying"] = o.Identifying
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableJobParameter struct {
	value *JobParameter
	isSet bool
}

func (v NullableJobParameter) Get() *JobParameter {
	return v.value
}

func (v *NullableJobParameter) Set(val *JobParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableJobParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableJobParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobParameter(val *JobParameter) *NullableJobParameter {
	return &NullableJobParameter{value: val, isSet: true}
}

func (v NullableJobParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
SaaS Provisioning Service

The SAP SaaS Provisioning service provides REST APIs that are responsible for the registration and provisioning of multitenant applications and services.   Use the APIs in this service to perform various operations related to your multitenant applications and services. For example, to get application registration details, subscribe a tenant to your application, unsubscribe a tenant from your application, retrieve all your application subscriptions, update subscription dependencies, and to get subscription job information. Note: \"Application Operations for App Providers\" APIs are intended for maintenance activities, not for runtime flows.  See also: * [Authorization](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/3670474a58c24ac2b082e76cbbd9dc19.html) * [Rate Limiting](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/77b217b3f57a45b987eb7fbc3305ce1e.html) * [Error Response Format](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/77fef2fb104b4b1795e2e6cee790e8b8.html) * [Asynchronous Jobs](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/0a0a6ab0ad114d72a6611c1c6b21683e.html)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the LabelAssignmentRequestPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LabelAssignmentRequestPayload{}

// LabelAssignmentRequestPayload JSON object with labels as key-value pairs that specify custom attributes of the entity.
type LabelAssignmentRequestPayload struct {
	// Labels as key-value pairs in JSON format. An entity is allowed up to 10 labels. The key of each label is mandatory and is limited to 63 characters. Standard labels can have any name (key) that you define, with only a single optional value assigned per key. To define a special type of label, called tags, specify the key with the name 'tags' and associate up to 10 values per tag in the array. The key 'tags' (in any casing variation) can only be used once per entity. Note that label values (not keys) are case-sensitive -- be careful not to create duplicate variants of the same value with a different casing (example: \"myValue\" and \"MyValue\").  For example: {  \"Cost Center\":\"2624061970\"  \"Department\":\"Sales\"  \"tags\": [\"Green\", \"Pharma\", \"Audited\"]  }
	Labels map[string]interface{} `json:"labels,omitempty"`
}

// NewLabelAssignmentRequestPayload instantiates a new LabelAssignmentRequestPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLabelAssignmentRequestPayload() *LabelAssignmentRequestPayload {
	this := LabelAssignmentRequestPayload{}
	return &this
}

// NewLabelAssignmentRequestPayloadWithDefaults instantiates a new LabelAssignmentRequestPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLabelAssignmentRequestPayloadWithDefaults() *LabelAssignmentRequestPayload {
	this := LabelAssignmentRequestPayload{}
	return &this
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *LabelAssignmentRequestPayload) GetLabels() map[string]interface{} {
	if o == nil || IsNil(o.Labels) {
		var ret map[string]interface{}
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabelAssignmentRequestPayload) GetLabelsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Labels) {
		return map[string]interface{}{}, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *LabelAssignmentRequestPayload) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]interface{} and assigns it to the Labels field.
func (o *LabelAssignmentRequestPayload) SetLabels(v map[string]interface{}) {
	o.Labels = v
}

func (o LabelAssignmentRequestPayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LabelAssignmentRequestPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	return toSerialize, nil
}

type NullableLabelAssignmentRequestPayload struct {
	value *LabelAssignmentRequestPayload
	isSet bool
}

func (v NullableLabelAssignmentRequestPayload) Get() *LabelAssignmentRequestPayload {
	return v.value
}

func (v *NullableLabelAssignmentRequestPayload) Set(val *LabelAssignmentRequestPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableLabelAssignmentRequestPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableLabelAssignmentRequestPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLabelAssignmentRequestPayload(val *LabelAssignmentRequestPayload) *NullableLabelAssignmentRequestPayload {
	return &NullableLabelAssignmentRequestPayload{value: val, isSet: true}
}

func (v NullableLabelAssignmentRequestPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLabelAssignmentRequestPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



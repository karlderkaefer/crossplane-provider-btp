/*
SaaS Provisioning Service

The SAP SaaS Provisioning service provides REST APIs that are responsible for the registration and provisioning of multitenant applications and services.   Use the APIs in this service to perform various operations related to your multitenant applications and services. For example, to get application registration details, subscribe a tenant to your application, unsubscribe a tenant from your application, retrieve all your application subscriptions, update subscription dependencies, and to get subscription job information. Note: \"Application Operations for App Providers\" APIs are intended for maintenance activities, not for runtime flows.  See also: * [Authorization](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/3670474a58c24ac2b082e76cbbd9dc19.html) * [Rate Limiting](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/77b217b3f57a45b987eb7fbc3305ce1e.html) * [Error Response Format](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/77fef2fb104b4b1795e2e6cee790e8b8.html) * [Asynchronous Jobs](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/0a0a6ab0ad114d72a6611c1c6b21683e.html)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ApplicationResourceDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationResourceDto{}

// ApplicationResourceDto The application resource reference in Unified Services. This object includes the name and path of the application resource.
type ApplicationResourceDto struct {
	GroupVersionType *GroupVersionType `json:"groupVersionType,omitempty"`
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

// NewApplicationResourceDto instantiates a new ApplicationResourceDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationResourceDto() *ApplicationResourceDto {
	this := ApplicationResourceDto{}
	return &this
}

// NewApplicationResourceDtoWithDefaults instantiates a new ApplicationResourceDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationResourceDtoWithDefaults() *ApplicationResourceDto {
	this := ApplicationResourceDto{}
	return &this
}

// GetGroupVersionType returns the GroupVersionType field value if set, zero value otherwise.
func (o *ApplicationResourceDto) GetGroupVersionType() GroupVersionType {
	if o == nil || IsNil(o.GroupVersionType) {
		var ret GroupVersionType
		return ret
	}
	return *o.GroupVersionType
}

// GetGroupVersionTypeOk returns a tuple with the GroupVersionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationResourceDto) GetGroupVersionTypeOk() (*GroupVersionType, bool) {
	if o == nil || IsNil(o.GroupVersionType) {
		return nil, false
	}
	return o.GroupVersionType, true
}

// HasGroupVersionType returns a boolean if a field has been set.
func (o *ApplicationResourceDto) HasGroupVersionType() bool {
	if o != nil && !IsNil(o.GroupVersionType) {
		return true
	}

	return false
}

// SetGroupVersionType gets a reference to the given GroupVersionType and assigns it to the GroupVersionType field.
func (o *ApplicationResourceDto) SetGroupVersionType(v GroupVersionType) {
	o.GroupVersionType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ApplicationResourceDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationResourceDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ApplicationResourceDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ApplicationResourceDto) SetName(v string) {
	o.Name = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *ApplicationResourceDto) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationResourceDto) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *ApplicationResourceDto) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *ApplicationResourceDto) SetPath(v string) {
	o.Path = &v
}

func (o ApplicationResourceDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationResourceDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GroupVersionType) {
		toSerialize["groupVersionType"] = o.GroupVersionType
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	return toSerialize, nil
}

type NullableApplicationResourceDto struct {
	value *ApplicationResourceDto
	isSet bool
}

func (v NullableApplicationResourceDto) Get() *ApplicationResourceDto {
	return v.value
}

func (v *NullableApplicationResourceDto) Set(val *ApplicationResourceDto) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationResourceDto) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationResourceDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationResourceDto(val *ApplicationResourceDto) *NullableApplicationResourceDto {
	return &NullableApplicationResourceDto{value: val, isSet: true}
}

func (v NullableApplicationResourceDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationResourceDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


